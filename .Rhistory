subset(ex3, wage96<500)
plot(ex3$wage96, ex3$height85, main="Scatterplot of Wages and Adult Height",
xlab="Wages", ylab = "Adult Height")
ex4 <- subset(ex3, wage96<500)
plot(ex4$wage96, ex4$height85, main="Scatterplot of Wages and Adult Height",
xlab="Wages", ylab = "Adult Height")
plot(ex3$height85, ex3$height81, main="Scatterplot of Adult vs. Adolescent Height",
xlab="Adult Height", ylab = "Adolescent Height")
ex3$shrink <- ex3$height81 > ex3$height85
View(ex3)
table(ex3$shrink)
ex5 <- subset(ex3, ex3$height81 > ex3$height85)
View(ex5)
ex5 <- subset(ex3, height81 > height85)
View(ex5)
table(ex5)
subset(ex3, height81 > height85)
subset(ex3, ex3$height81 > ex3$height85)
plot(ex3$height85, ex3$height81, main="Scatterplot of Adult vs. Adolescent Height",
xlab="Adult Height", ylab = "Adolescent Height")
#If adolescent height is greater than adult height, value will return TRUE
test <- subset(ex3, ex3$height81 > ex3$height85)
plot(test$height85, test$height81, main="Scatterplot of Adult vs. Adolescent Height",
xlab="Adult Height", ylab = "Adolescent Height")
plot(ex3$height85, ex3$height81, main="Scatterplot of Adult vs. Adolescent Height",
xlab="Adult Height", ylab = "Adolescent Height")
knitr::opts_chunk$set(echo = TRUE)
View(data)
lab <- read_dta("Ch2_lab_survey_data.dta")
library(haven)
lab <- read_dta("Ch2_lab_survey_data.dta")
lab$Arlington <- (
lab$precinct == "AR49" | lab$precinct == "AR22" | lab$precinct == "AR2" |
lab$precinct == "AR18" | lab$precinct == "41" | lab$precinct == "16" |
lab$precinct == "4" | lab$precinct == "17" | (lab$precinct == "2" &
lab$state == 4& !is.na(lab$state))|
lab$precinct == "31" | lab$precinct == "48")
#count observations from each county
table(lab$Arlington)
lab$age[lab$year_born <= 1920] <- NA
lab$age[lab$year_born > 2016] <- NA
summary(lab$age)
lab$age[lab$year_born <= 1920] <- NA
lab$age[lab$year_born > 2016] <- NA
summary(lab$age)
View(lab)
lab$male <- (lab$gender == 1)
lab$female <- (lab$gender == 2)
lab$male <- (lab$gender == 1)
lab$female <- (lab$gender == 2)
table(lab$male)
table(lab$gender)
summary(lab$therm_clinton)
summary(lab$therm_trump)
summary(lab$therm_clinton)
summary(lab$therm_trump)
lab$therm_clinton[lab$therm_clinton > 100] <- NA
summary(lab$therm_clinton)
table(lab$education)
table(lab$education)
lab$education[lab$education == 4] <- NA
lab$education[lab$education == 5] <- 4
lab$education[lab$education == 6] <- 5
lab$education[lab$education == 7] <- 6
table(lab$education)
lab$education[lab$education == 4] <- NA
lab$education[lab$education == 5] <- 4
lab$education[lab$education == 6] <- 5
lab$education[lab$education == 7] <- 6
table(lab$education)
data = dta
knitr::opts_chunk$set(echo = TRUE)
data = load(file="Ch2_Exercise2_Olympics.RData")
View(data)
data = load(file="Ch2_Exercise2_Olympics.RData")
data = load(file="Ch2_Exercise2_Olympics.RData")
View(data)
devtools::install_github("kbenoit/quanteda.dictionaries")
library("readtext")
library("quanteda")
library("quanteda.dictionaries")
library("beepr")
library("stringr")
library("data.table")
library("tidyverse")
### I import the text from the transcripts. I do it by periods:
#setwd("~/Google Drive/Gender and legislative politics/Data/Transcripts")
#
load("transcripts_09_19.Rdata")
pwd
load("~/transcripts_09_19_subset.Rdata")
load("transcripts_09_19.Rdata")
View(transcripts_09_19_subset)
knitr::opts_chunk$set(echo = TRUE)
data = load(file="Ch2_Exercise2_Olympics.RData")
View(data)
data = load(file="Ch2_Exercise2_Olympics.RData")
View(data)
head(data)
data = load(file="Ch2_Exercise2_Olympics.RData")
View(data)
load("~/Ch2_Exercise2_Olympics.RData")
data = load("~/Ch2_Exercise2_Olympics.RData")
View(data)
pwd
cmd
x = load("~/Ch2_Exercise2_Olympics.RData")
View(x)
load("/Users/allenchurch/Ch2_Exercise2_Olympics.RData")
x = load("/Users/allenchurch/Ch2_Exercise2_Olympics.RData")
View(x)
setwd("~/")
load("~/Ch2_Exercise2_Olympics.RData")
load("~/Ch2_Exercise2_Olympics.RData")
knitr::opts_chunk$set(echo = TRUE)
x <- load("~/Ch2_Exercise2_Olympics.RData")
View(x)
load("Ch2_Exercise2_Olympics.RData")
xy <- load("Ch2_Exercise2_Olympics.RData")
xy
load("/Users/allenchurch/Ch2_Exercise2_Olympics.RData")
View(dta)
dta <- load("Ch2_Exercise2_Olympics.RData")
dta
xy <- load("Ch2_Exercise2_Olympics.RData")
View(dta)
dta
data1 <- dta
View(data`)
View(data1)
data1 <- dta
data1 <- dta
data1 <- dta
data1
data1
``
data1
load("/Users/allenchurch/Ch2_Exercise2_Olympics.RData")
data1 <- load("/Users/allenchurch/Ch2_Exercise2_Olympics.RData")
load("/Users/allenchurch/Ch2_Exercise2_Olympics.RData")
dta <- load("/Users/allenchurch/Ch2_Exercise2_Olympics.RData")
load("/Users/allenchurch/Ch2_Exercise2_Olympics.RData")
data1 <- dta
View(data1)
summary(data1$medals)
summary(data1$athletes)
summary(data1$GDP)
summary(data1$medals)
summary(data1$athletes)
summary(data1$GDP)
##Create cols with 5 column names, subset data1 with cols, and print first 5 rows
cols <- c("country", "year", "medals", "athletes", "GDP")
subset <- data1[cols]
subset[1:5,]
#Create table with year column in data1
table(data1$year)
plot(data1$medals, data1$athletes, main="Scatterplot of Medals and Number of Athletes",
xlab="Medals", ylab = "Number of Athletes")
plot(data1$medals, data1$GDP, main="Scatterplot of Medals and GDP",
xlab="Medals", ylab = "GDP")
plot(data1$medals, data1$population, main="Scatterplot of Medals and Population",
xlab="Medals", ylab = "Population")
plot(data1$medals, data1$temp, main="Scatterplot of Medals and Population",
xlab="Medals", ylab = "Temperature in F")
tinytex::install_tinytex()
load("/Users/allenchurch/Ch2_Exercise3_Height_and_Wages_US.RData")
ex3 <- dta
ex3 <- load("/Users/allenchurch/Ch2_Exercise3_Height_and_Wages_US.RData")
dta
ex3 <- dta
summary(ex3$height85)
summary(ex3$height81)
#Subset dataset and specify wage96 column to be above 500
ex4 <- subset(ex3, wage96<500)
plot(ex4$wage96, ex4$height85, main="Scatterplot of Wages and Adult Height",
xlab="Wages", ylab = "Adult Height")
plot(ex3$height85, ex3$height81, main="Scatterplot of Adult vs. Adolescent Height",
xlab="Adult Height", ylab = "Adolescent Height")
ex3$shrink <- ex3$height81 > ex3$height85
View(ex3$shrink)
table(ex3$shrink)
plot(ex3$height85, ex3$height81, main="Scatterplot of Adult vs. Adolescent Height",
xlab="Adult Height", ylab = "Adolescent Height")
table(ex3$shrink==TRUE)
subset(ex3$shrink==TRUE)
subset(ex3, shrink==TRUE)
View(ex3$shrink)
#The table below shows that
table(ex3$shrink)
View(ex3$shrink)
which(ex3$shrink==TRUE)
plot(ex3$height85, ex3$height81, main="Scatterplot of Adult vs. Adolescent Height",
xlab="Adult Height", ylab = "Adolescent Height")
require(knitr)
require(haven)
require(AER)
opts_chunk$set(echo = TRUE)
options(digits = 3)
#add your working directory here
opts_knit$set(root.dir ="allenchurch/Documents/fall2019")
lab <- read_dta("Ch2_lab_survey_data.dta")
View(lab)
y=lab$therm_trump
x=lab$education
results1 <- lm(y~x, data = lab)
summary(results1)
#coeftest(results1, vcov. = vcovHC(results1,type="HC1"))
coeftest(results1, vcov. = vcovHC(results1,type="HC1"))
View(lab)
plot(lab$education, lab$therm_trump,
type = "p",
pch=20,
xlab= 'education',
ylab= 'therm_trump',
main='title')
abline(a=coef(results1)[1], b=coef(results1)[2], col=2)
plot(lab$education, lab$therm_trump,
type = "p",
pch=20,
xlab= 'Education',
ylab= 'Trump Feeling Thermometer',
main='Scatterplot of Trump Feeling Thermometer and Education Data')
abline(a=coef(results1)[1], b=coef(results1)[2], col=2)
#Create a plot specifying education on x-axis, Trump thermometer on y-axis, labels of axes and graph title
plot(lab$education, lab$therm_trump,
type = "p",
pch = 20,
xlab = 'Education',
ylab = 'Trump Feeling Thermometer',
main = 'Scatterplot of Trump Feeling Thermometer and Education Data')
#Add fitted line using regression results (results1)
abline(a=coef(results1)[1], b=coef(results1)[2], col=2)
#Create a plot specifying education on x-axis, Trump thermometer on y-axis, labels of axes and graph title
plot(lab$education, lab$therm_trump,
type = "p",
pch = 20,
xlab = 'Education',
ylab = 'Trump Feeling Thermometer',
main = 'Scatterplot of Trump Feeling Thermometer and Education Data')
#Add fitted line using regression results (results1)
abline(a=coef(results1)[1], b=coef(results1)[2], col=2)
#Create a plot specifying education on x-axis, Trump thermometer on y-axis, labels of axes and graph title
#Add jitter subcommand that adds random noise to plot and aids visualization
plot(jitter(lab$education, 2), (lab$therm_trump, 2),
#Create a plot specifying education on x-axis, Trump thermometer on y-axis, labels of axes and graph title
#Add jitter subcommand that adds random noise to plot and aids visualization
plot(jitter(lab$education, 2), (lab$therm_trump 2),
#Create a plot specifying education on x-axis, Trump thermometer on y-axis, labels of axes and graph title
#Add jitter subcommand that adds random noise to plot and aids visualization
plot(jitter(lab$education, 2), (lab$therm_trump, 2),
#Create a plot specifying education on x-axis, Trump thermometer on y-axis, labels of axes and graph title
#Add jitter subcommand that adds random noise to plot and aids visualization
plot(jitter(lab$education, 2), jitter(lab$therm_trump, 2),
type = "p",
pch = 20,
xlab = 'Education',
ylab = 'Trump Feeling Thermometer',
main = 'Relationship Between Trump Feeling Thermometer and Education Data')
#Add fitted line using regression results (results1)
abline(a=coef(results1)[1], b=coef(results1)[2], col=2)
#Create a plot specifying education on x-axis, Trump thermometer on y-axis, labels of axes and graph title
#Add jitter subcommand that adds random noise to plot and aids visualization
plot(jitter(lab$education, 2), jitter(lab$therm_trump, 2),
type = "p",
pch = 20,
xlab = 'Education',
ylab = 'Trump Feeling Thermometer',
main = 'Relationship Between Trump Feeling Thermometer and \n Education Data')
#Add fitted line using regression results (results1)
abline(a=coef(results1)[1], b=coef(results1)[2], col=2)
plot(lab$education, lab$therm_clinton,
type = "p",
pch=20,
xlab= 'education',
ylab= 'therm_clinton',
main='title')
#Set y variable to therm_clinton column, and set x variable to education column
View(lab)
#Set y variable to therm_clinton column, and set x variable to education column
y2 = lab$therm_clinton
x2 = lab$education
#Run linear model with therm_clinton as dependent variable (y2), education as independent variable (x2) and summarize results
results2 <- lm(y2~x2, data = lab)
summary(results2)
plot(jitter(lab$education,2), jitter(lab$therm_clinton,2),
type = "p",
pch=20,
xlab= 'education',
ylab= 'therm_clinton',
main='title')
plot(lab$education, lab$therm_clinton,
type = "p",
pch=20,
xlab= 'Education',
ylab= 'Clinton Feeling Thermometer',
main='Relationship Between Clinton Feeling Thermometer and \n Education Data')
#Add fitted line using regression results (results2)
abline(a=coef(results2)[1], b=coef(results2)[2], col=2)
plot(jitter(lab$education, 2), jitter(lab$therm_clinton, 2),
type = "p",
pch = 20,
xlab = 'Education',
ylab = 'Clinton Feeling Thermometer',
main = 'Relationship Between Clinton Feeling Thermometer and \n Education Data')
#Add fitted line using regression results (results1)
abline(a=coef(results2)[1], b=coef(results2)[2], col=2)
#Create linear model as above, with y2 variable as therm_clinton column, and x2 variable as education column
#Select rows 1-400 from lab dataset, and summarize results of linear model (results3)
results3 <- lm(y2 ~ x2, data=lab[1:400,])
summary(results3)
#Create linear model as above, with y2 variable as therm_clinton column, and x2 variable as education column
#Select rows 1-400 from lab dataset, and summarize results of linear model (results3)
results3 <- lm(lab$therm_clinton~lab$education, data=lab[1:400,])
summary(results3)
#Create linear model as above, with y2 variable as therm_clinton column, and x2 variable as education column
#Select rows 1-400 from lab dataset, and summarize results of linear model (results3)
results3 <- lm(formula = therm_clinton ~ education, data=lab[1:400,])
summary(results3)
#Create linear model as above, but only select rows 1-400 from lab dataset, and summarize results of linear model (results3)
results3 <- lm(formula = therm_clinton ~ education, data=lab[1:400,])
summary(results3)
summary(lab)
nrows(lab)
nrow(lab)
nrow(lab)
#Create Republican dummy variable that specifies political party can equal 5, 6, or 7 (taken from survey book)
lab$Rep <- (lab$pol_party == 5 | lab$pol_party == 6 | lab$pol_party == 7)
View(lab$Rep)
View(lab$Rep==1)
#Run linear model with therm_trump as dependent variable, education as independent variable, and specify to select dummy Rep variable
results4 <- lm(therm_trump ~ education, data=lab[lab$Rep==1,])
#Create Republican dummy variable that specifies political party can equal 5, 6, or 7 (taken from survey book)
lab$Rep <- (lab$pol_party == 5 | lab$pol_party == 6 | lab$pol_party == 7)
#Run linear model with therm_trump as dependent variable, education as independent variable, and specify to select dummy Rep variable
results4 <- lm(therm_trump ~ education, data=lab[lab$Rep==1,])
#Use robust standard errors and display OLS results (results4) from linear model above
coeftest(results4, vcov. = vcovHC(results4, type="HC1"))
#Create new female variable, with gender equalling 2
lab$female <- (lab$gender==2)
#Create linear model with Trump thermometer as a function of gender for women
results5 <- lm(therm_trump ~ female, data = lab)
coeftest(results5, vcov. = vcovHC(results5, type="HC1"))
therm_trump_female <- mean(lab$therm_trump[lab$female==1], na.rm = TRUE)
therm_trump_others <- mean(lab$therm_trump[lab$female==0], na.rm = TRUE)
therm_trump_others <- mean(lab$therm_trump[lab$female==0], na.rm = TRUE)
therm_trump_female - therm_trump_others
#Crete variable that stores the mean value for Trump thermometer for women
therm_trump_female <- mean(lab$therm_trump[lab$female==1], na.rm = TRUE)
#Create variable that stores the mean value for Trump thermomter for other
therm_trump_others <- mean(lab$therm_trump[lab$female==0], na.rm = TRUE)
#Calculate the difference between the mean value for Trump thermometer for women and mean value for Trump thermometer for other
therm_trump_female - therm_trump_others
therm_trump_female
#View result for the mean value for Trump thermometer for others
therm_trump_others
setwd("/Users/allenchurch/Documents/fall2019")
pwd
$pwd
require(knitr)
require(haven)
require(car)
library(readxl)
opts_chunk$set(echo = TRUE)
options(digits = 3)
lab <- dta
View(lab)
View(lab)
View(lab)
load("~/Documents/fall2019/Chapter4_Lab_ChildPoverty.RData")
lab <- dta
View(lab)
View(lab)
lab <- dta
lab <- dta
load("Chapter4_Lab_ChildPoverty.RData")
result1 <- lm(child_poverty ~ unemployment, data = dta)
result1 <- lm(child_poverty ~ unemploy, data = dta)
summary(results1)
summary(result1)
r1 <- lm(dta$child_poverty ~ dta$family_spending)
summary(r1)
require(knitr)
require(haven)
require(car)
library(readxl)
opts_chunk$set(echo = TRUE)
options(digits = 3)
load("Chapter4_Lab_ChildPoverty.RData")
r1 <- lm(dta$child_poverty ~ dta$family_spending)
summary(r1)
plot(dta$family_spending, dta$child_poverty, xlab = "Family Spending", ylab = "Child Poverty")
abline(a = coef(r1[1], b = coef(r1[2], col = 'red')
text(dta$family_spending, dta$child_poverty, labels=dta$country)))
load("/Users/allenchurch/Downloads/Ch4_Exercise3_Presidents_and_Economy.RData")
knitr::opts_chunk$set(echo = TRUE)
dta
pres_dta <- dta
pres_dta
View(pres_dta)
View(dta)
load("Ch4_Exercise3_Presidents_and_Economy.RData")
setwd("~/Documents/fall2019")
load("Ch4_Exercise3_Presidents_and_Economy.RData")
pres_dta <- dta
View(pres_dta)
View(pres_dta)
model1 <- lm(pres_dta$Unemployment ~ pres_dta$LagDemPresident)
summary(model1)
model2 <- lm(pres_dta$ChangeGDPpc ~ pres_dta$LagDemPresident)
summary(model2)
is.na.data.frame(pres_dta$LagDemPresident)
is.na.data.frame(pres_dta$LagDemPresident==TRUE)
is.na(pres_dta$LagDemPresident)
is.na(pres_dta$ChangeGDPpc)
## Set model and simulation parameters
Obs       = 100		# Number of observations in each simulation
Reps      = 50		# Number of times we run the simulation
TrueBeta0	= 12000	# "True" beta0 for the simulated
TrueBeta1	= 1000	# "True" beta1 for the simulated
SD 		    = 10000	# The standard deviation of the error. The bigger this is, the larger the average value of epsilon
Ed = 16 * runif(Obs)# Simulate years of education as being between 0 and 16
# "runif" is a uniform random variable between 0 and 1, with all values having equal probability
CoefMatrix	= matrix(NA, Reps, 2)	# Matrix to store our results.
# 1st argument is NA, meaning we store "not available" as initial values in the matrix
# 2nd argument is Reps, meaning the number of rows is equal to number of times we run the simulations
# 3rd argument is 2 meaning we have 2 columns, one for storing the beta0 estimate and one for storing the beta1 estimate
# Loop: repeat the commands between the brackets multiple times
for (ii in 1:Reps) {
Salary 	= TrueBeta0+ TrueBeta1* Ed + SD*rnorm(Obs)
# Generate Salary = beta0 + beta1*Ed + epsilon
# beta0 is the constant
# beta1 is the number multiplied by the X variable
# Epsilon has 2 parts: SD is the standard deviation; the bigger it is, the more epsilon varies.
# "runif" is a uniform random variable between 0 and 1, with all values having equal probability
OLS.result = lm(Salary ~ Ed) # Run a regression using simulated values of Y
CoefMatrix[ii, ]	= coefficients(OLS.result)	 # Put OLS.result coefficients in row ii of CoefMatrix
## For fun: plot results for each survey
## plot(Ed, Salary, pch = 19, col= "darkgreen")
## abline(OLS.result, lwd = 3, col= "darkgreen")
## Sys.sleep(0.075)		## Include to slow down calculations so we can see each plot (briefly); not necessary
}							 # This closes the "loop"
c(mean(CoefMatrix[,1]), min(CoefMatrix[,1]), max(CoefMatrix[,1]))
# Average, min and max of beta_0 estimates
c(mean(CoefMatrix[,2]), min(CoefMatrix[,2]), max(CoefMatrix[,2]))
# Average, min and max of beta_1 estimates
#
# For use in Chapter 3, #2 part (g):
#
# Kernel Density Plot
plot(density(CoefMatrix[,2]), main = 'Kernel Density Estimate')
summary(OLS.result)
# have to take second column with 50 beta hat estimates, and run t stats for each of them, then store in a matrix/vector
CoefMatrix
# have to take second column with 50 beta hat estimates, and run t stats for each of them, then store in a matrix/vector
CoefMatrix[,2]
# have to take second column with 50 beta hat estimates, and run t stats for each of them, then store in a matrix/vector
CoefMatrix
# have to take second column with 50 beta hat estimates, and run t stats for each of them, then store in a matrix/vector
CoefMatrix[,2]
# have to take second column with 50 beta hat estimates, and run t stats for each of them, then store in a matrix/vector
t.test(CoefMatrix[,2])
# have to take second column with 50 beta hat estimates, and run t stats for each of them, then store in a matrix/vector
t.test(CoefMatrix$,2)
# have to take second column with 50 beta hat estimates, and run t stats for each of them, then store in a matrix/vector
CoefMatrix[,2]
# have to take second column with 50 beta hat estimates, and run t stats for each of them, then store in a matrix/vector
education_coef <- CoefMatrix[,2]
education_coef
ttest_education <- t.test(education_coef)
names(ttest_education)
ttest_education
ttest_education$statistic
c(mean(CoefMatrix[,2]), min(CoefMatrix[,2]), max(CoefMatrix[,2]))
for (i in education_coef) {
t.test(education_coef)
}
test1 <- t.test(education_coef)
print(test1)
print(test1)
test1 <- t.test(i)
#take second column with 50 beta hat estimates, and run t stats for each of them, then store in a matrix/vector?
education_coef <- CoefMatrix[,2]
ttest_education <- t.test(education_coef)
names(ttest_education)
ttest_education$statistic
knitr::opts_chunk$set(echo = TRUE)
load("Ch4_Exercise3_Presidents_and_Economy.RData")
pres_dta <- dta
View(pres_dta)
#Estimate model with unemployment as dependent variable and LagDemPresident as independent variable. Summarize results
model1 <- lm(pres_dta$Unemployment ~ pres_dta$LagDemPresident)
summary(model1)
#Create linear model 2, with ChangeGDPpc as depdendent variable and LagDemPres as independent variable. Summarize results
model2 <- lm(pres_dta$ChangeGDPpc ~ pres_dta$LagDemPresident)
summary(model2)
#Use is.na function and specify ChangeGDPpc column
is.na(pres_dta$ChangeGDPpc)
BetaRange <- seq(0, 800, 4)
stderrorBeta <- 164.0
PowerCurve <- pnorm(BetaRange/stderrorBeta - 2.32)
plot(BetaRange, PowerCurve, xlab="Beta", ylab = "Probability reject null when alpha = 0.05", type="l")
#Estimate model with unemployment as dependent variable and LagDemPresident as independent variable. Summarize results
model1 <- lm(pres_dta$Unemployment ~ pres_dta$LagDemPresident)
summary(model1)
OLS.result
OLS.result$residuals
OLS.result$df.residual
summary(OLS.result)
summary(OLS.result)["Standard Error"]
summary(OLS.result)[, "Standard Error"]
summary(OLS.result)[, "Std. Error"]
summary(OLS.result)["Std. Error"]
